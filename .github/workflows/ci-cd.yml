name: CI/CD

on:
  push:

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cargo Cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: dev-${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}
          restore-keys: dev-${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}

      - name: Cargo Target Cache
        uses: actions/cache@v3
        with:
          path: target
          key: dev-${{ runner.os }}-cargo-target-${{ hashFiles('Cargo.toml') }}
          restore-keys: dev-${{ runner.os }}-cargo-target-${{ hashFiles('Cargo.toml') }}
      
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
      
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    name: Build
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    needs: checks
    strategy:
      fail-fast: false 
      matrix:
        job:
          - { target: x86_64-pc-windows-gnu, executable: windows.exe, os: windows-latest }
          - { target: x86_64-unknown-linux-gnu, executable: amd64-linux, os: ubuntu-latest }

    runs-on: ${{ matrix.job.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cargo Cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: build-${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}
          restore-keys: build-${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}

      - name: Cargo Target Cache
        uses: actions/cache@v3
        with:
          path: target
          key: build-${{ runner.os }}-cargo-target-${{ hashFiles('Cargo.toml') }}
          restore-keys: build-${{ runner.os }}-cargo-target-${{ hashFiles('Cargo.toml') }}
      
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true

      - name: Build 
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ matrix.job.target }}

      - name: Rename
        run: |
          rm target/${{ matrix.job.target }}/release/execd.d
          cp target/${{ matrix.job.target }}/release/execd* execd-${{ matrix.job.executable }}
        
      - name: Generate release tag
        if: github.ref == 'refs/heads/main'
        id: tag
        run: |
          echo "::set-output name=release_tag::UserBuild_$(date +"%Y-%m-%d_%H-%M"-%S)"

      - name: Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            execd-${{ matrix.job.executable }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
